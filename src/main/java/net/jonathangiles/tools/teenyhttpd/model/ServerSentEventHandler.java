package net.jonathangiles.tools.teenyhttpd.model;

import net.jonathangiles.tools.teenyhttpd.implementation.ServerSentEventHandlerImpl;
import net.jonathangiles.tools.teenyhttpd.implementation.ServerSentEventRequest;

import java.util.function.Consumer;
import java.util.function.Function;

public interface ServerSentEventHandler {

    static ServerSentEventHandler create() {
        return create(null);
    }

    static ServerSentEventHandler create(Consumer<ServerSentEventHandler> onActive) {
        return create(onActive, null);
    }

    static ServerSentEventHandler create(Consumer<ServerSentEventHandler> onActive,
                                         Consumer<ServerSentEventHandler> onInactive) {
        return new ServerSentEventHandlerImpl() {
            @Override public void onActive() {
                if (onActive != null) {
                    onActive.accept(this);
                }
            }

            @Override
            public void onInactive() {
                if (onInactive != null) {
                    onInactive.accept(this);
                }
            }
        };
    }

    /**
     * Called when the client connects to the SSE endpoint.
     * @param request The initial request from the client.
     */
    void onConnect(Request request);

    /**
     * Called when the client disconnects from the SSE endpoint.
     * @param request The initial request from the client.
     */
    void onDisconnect(Request request);

    /**
     * Sends a message to all clients, with the message appended to the `data` field of the Server-Sent Event.
     * @param message The message to send.
     */
    default void sendMessage(String message) {
        sendMessage(new ServerSentEventMessage(message));
    }

    /**
     * Sends a message to all clients, with each field of the {@link ServerSentEventMessage} being set in the message,
     * as long as the field is not null.
     * @param message The message to send.
     */
    default void sendMessage(ServerSentEventMessage message) {
        sendMessage(request -> message);
    }

    /**
     * Sends a message to all clients, with the message being generated by the provided function. This allows for the
     * message to be tailored per client, if required (e.g. by using path parameters or query parameters).
     *
     * @param messageGenerator A function that takes a {@link ServerSentEventRequest} and returns a
     * {@link ServerSentEventMessage}, that will then be sent to the client represented by the given request.
     */
    void sendMessage(final Function<Request, ServerSentEventMessage> messageGenerator);

    /**
     * Returns true if there are active connections to the SSE endpoint.
     * @return true if there are active connections to the SSE endpoint.
     */
    boolean hasActiveConnections();

    /**
     * Called when the first client connects to the SSE endpoint. This is a good point to start any background threads
     * that will generate data, which can then be sent by calling the sendMessage methods.
     */
    void onActive();

    /**
     * Called when the last client disconnects from the SSE endpoint. This is a good point to stop any background threads
     * that are generating data.
     */
    void onInactive();
}
